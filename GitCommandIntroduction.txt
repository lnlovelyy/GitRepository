//git窗口显示no next tag时，按下q键即可退出并重新输入

1.创建git仓库
	mkdir /F/GitRepository
	cd /F/GitRepository
	pwd
	/F/GitRepository
2.初始化git仓库
	git init
3.添加文件到git仓库
	git add <file>，注意，可反复多次使用，添加多个文件；
	git commit -m <message>，完成。//message为本次提交的说明文字，方便以后查找
4.查看工作区的状态(是否有修改/待提交文件)
	git status
5.查看修改内容
	git diff   
//确认修改内容无误后，便可git add 、git commit提交更新文件
6.显示从最近到最远的提交日志/历史(若新版本回退到旧版本后，便找不到新版本历史)
	git log  //git log --pretty=oneline  会使日志显示简洁一点
7.commit_id
	是每次提交时都会出现的一大长串数字(唯一的)，利用它可以回退到以往任何提交版本
8.当前版本表示
	Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本
就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
9.查看命令历史，以便确定要回到未来的哪个版本(可查找到所有新旧版本的commit_id)
	git reflog
10.回到任意版本
	git reset --hard commit_id  
	//由于commit_id很长，只用前面可以标识其唯一性的几位数字即可，git是可以自行找到(强烈推荐)
	//也可以用git reset --hard HEAD/HEAD^等回到前1/2/……次版本，但是不如直接commit_id好区分
11.工作区(Working Directory)
	存放文件的目录
12.版本库(Repository)
	工作区里隐藏的目录.git，包括暂存区(stage/index)和分支(第一个分支叫master)
	//git add就是把文件修改添加到暂存区；
	//git commit就是把暂存区的所有内容提交到当前分支。(分支只有一个master时，就是全添加到master)
	//关于工作区和版本库的直观图示，请看廖雪峰的git教程“时光机穿梭--工作区和暂存区”
13.Git跟踪并管理的是修改，而非文件。
	你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，
也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。
	每次修改，如果不用git add到暂存区，那就不会加入到commit中。//三步：修改--git add--git commit
14.查看工作区和版本库里面最新版本的区别
	git diff HEAD -- GitCommandIntroduction.txt
